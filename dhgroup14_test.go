// Written in 2013 by Dmitry Chestnykh.
//
// To the extent possible under law, the author have dedicated all copyright
// and related and neighboring rights to this software to the public domain
// worldwide. This software is distributed without any warranty.
// http://creativecommons.org/publicdomain/zero/1.0/

package dhgroup14

import (
	"bytes"
	"crypto/rand"
	"testing"
)

// Test vectors generated by Colin Percival's implementation
// from spiped (http://spiped.googlecode.com).
var golden = struct {
	privateKey1 []byte
	privateKey2 []byte
	publicKey1  []byte
	publicKey2  []byte
	sharedKey   []byte
}{
	privateKey1: []byte{
		0x07, 0xcd, 0xed, 0xf7, 0x97, 0x7e, 0xf9, 0x0e, 0x2f, 0x9a,
		0x69, 0x4c, 0x6d, 0xdb, 0xca, 0xee, 0x83, 0x1e, 0x37, 0x65,
		0x9d, 0x6e, 0xa2, 0x97, 0x15, 0x72, 0xdb, 0x38, 0xdc, 0x06,
		0x36, 0xd4,
	},
	publicKey1: []byte{
		0x09, 0xb5, 0x67, 0xcb, 0x98, 0x51, 0xdc, 0xb2, 0xab, 0xfd,
		0x6f, 0x83, 0x5d, 0xfc, 0x63, 0xe8, 0x82, 0x82, 0x9c, 0x33,
		0x9f, 0x18, 0x03, 0x31, 0x42, 0xd7, 0x26, 0x71, 0x71, 0x6e,
		0x68, 0xb7, 0x02, 0xc4, 0xb2, 0xa1, 0x5f, 0xc1, 0xff, 0x23,
		0xcc, 0x66, 0x31, 0x90, 0xca, 0x9a, 0xf5, 0x96, 0xe0, 0x65,
		0x62, 0xf0, 0xc6, 0x16, 0x2b, 0x15, 0x5b, 0x6e, 0xa6, 0x8c,
		0xae, 0x19, 0x33, 0x8c, 0x32, 0x99, 0x06, 0x53, 0xc0, 0xac,
		0x8b, 0x51, 0x0a, 0xf4, 0x7c, 0x04, 0x1b, 0xf5, 0xe7, 0x7e,
		0xe3, 0x7f, 0xac, 0x7f, 0xa6, 0xd8, 0x74, 0xad, 0x74, 0xcf,
		0xca, 0x9c, 0xdd, 0x1f, 0x0c, 0xfb, 0xbe, 0xfa, 0x84, 0x49,
		0xa7, 0x8c, 0x1d, 0x9a, 0x64, 0xca, 0x96, 0x5f, 0xcb, 0x13,
		0x76, 0xd3, 0x0a, 0x4f, 0xa1, 0x50, 0xe0, 0x22, 0xfd, 0x77,
		0xa6, 0x6b, 0x0d, 0x5c, 0x83, 0x24, 0xf9, 0xb0, 0xeb, 0xfc,
		0x0a, 0x45, 0x25, 0x0f, 0x84, 0x05, 0x44, 0x18, 0xd0, 0x50,
		0x8d, 0xea, 0x69, 0xf0, 0x42, 0x36, 0xda, 0x43, 0xea, 0xc9,
		0xcc, 0xf9, 0xd7, 0x49, 0x1c, 0x43, 0x4b, 0x21, 0xc7, 0x81,
		0x62, 0x1c, 0x6c, 0x2a, 0xa2, 0xfe, 0x84, 0x60, 0x42, 0x42,
		0x35, 0xb0, 0x6c, 0x58, 0x23, 0x89, 0xae, 0x36, 0x5e, 0xb4,
		0x3b, 0x2a, 0xed, 0x20, 0xdc, 0x01, 0xed, 0x56, 0x36, 0x42,
		0x3a, 0x8f, 0xd1, 0x3f, 0xef, 0x4b, 0x04, 0x32, 0xc0, 0x60,
		0x18, 0x25, 0x3c, 0xc2, 0x22, 0x27, 0x50, 0xd2, 0x94, 0x4b,
		0xe1, 0xcd, 0x5d, 0x22, 0xe0, 0x0d, 0x4f, 0xa0, 0x24, 0x12,
		0x2e, 0xce, 0x4a, 0xef, 0xa1, 0xd0, 0x79, 0xc7, 0xf6, 0x38,
		0x11, 0x44, 0xaf, 0xee, 0xe8, 0x1f, 0xb9, 0x7d, 0xe5, 0x6b,
		0x91, 0x3c, 0x5a, 0xff, 0x5b, 0xe4, 0xa8, 0xc6, 0xc6, 0x7f,
		0x1b, 0xdb, 0xe8, 0xb4, 0x22, 0x19,
	},
	privateKey2: []byte{
		0x82, 0x30, 0x8e, 0xbe, 0x0a, 0x6c, 0xed, 0x6c, 0xeb, 0xec,
		0x65, 0x72, 0x84, 0x47, 0xaf, 0xa2, 0x6a, 0x89, 0xe3, 0x6f,
		0x68, 0xe8, 0x7d, 0xd9, 0xa4, 0xa3, 0x7b, 0x4b, 0xb8, 0xf2,
		0x73, 0x51,
	},
	publicKey2: []byte{
		0x12, 0x38, 0xda, 0x6c, 0x9b, 0x6c, 0x75, 0xda, 0x55, 0x0e,
		0x20, 0x83, 0x2f, 0xb2, 0xaa, 0xf3, 0xa9, 0x8b, 0x1b, 0x7d,
		0xbb, 0x5f, 0x8c, 0x4d, 0xe5, 0x69, 0xb1, 0xc6, 0x61, 0x44,
		0xe7, 0xb3, 0xf8, 0x68, 0x75, 0xb0, 0x90, 0x5c, 0x7b, 0xe6,
		0x60, 0x03, 0x0d, 0xdd, 0x51, 0x6a, 0x7d, 0x1f, 0x3d, 0x43,
		0x55, 0xe7, 0xc3, 0x87, 0x76, 0xc6, 0xcf, 0xff, 0x05, 0x2d,
		0xf7, 0xcf, 0xd4, 0x8d, 0x9b, 0x34, 0xf7, 0x47, 0xe3, 0x57,
		0xb5, 0x1c, 0x2b, 0x6d, 0x8e, 0x19, 0xce, 0x4a, 0x49, 0x68,
		0x1e, 0x79, 0xbc, 0x6f, 0xcc, 0xea, 0x42, 0xdf, 0xa6, 0x3f,
		0x5f, 0xfa, 0x05, 0xa2, 0x39, 0x4f, 0x98, 0xf1, 0xd8, 0xf8,
		0x95, 0x8d, 0xe1, 0xc3, 0xaa, 0xe3, 0xcb, 0xe0, 0xe9, 0xe9,
		0x11, 0x2f, 0xf1, 0x4f, 0xfc, 0xd7, 0x3f, 0x57, 0x7d, 0xe5,
		0x91, 0xa1, 0x2f, 0x3e, 0x95, 0xba, 0x99, 0xd2, 0x25, 0xab,
		0xf6, 0xb6, 0xce, 0xf6, 0x1a, 0x2a, 0xa1, 0x1c, 0x19, 0x56,
		0x2d, 0xf9, 0x65, 0xbb, 0x96, 0x70, 0xc4, 0xa7, 0x40, 0x12,
		0x7e, 0xe4, 0xd4, 0xfb, 0x64, 0xad, 0xbb, 0x8e, 0x33, 0x61,
		0x09, 0x48, 0x85, 0x68, 0xdc, 0x77, 0xcb, 0xcf, 0x14, 0x5f,
		0x19, 0x2a, 0x89, 0x95, 0x6f, 0x19, 0xd0, 0xd7, 0xcb, 0xf5,
		0x08, 0x7c, 0xa0, 0xf9, 0xd9, 0xc3, 0x43, 0x8f, 0x8f, 0xa5,
		0x0d, 0xa7, 0x17, 0x21, 0x77, 0xcd, 0x24, 0x18, 0x33, 0x13,
		0x36, 0x19, 0xb3, 0x5c, 0x4d, 0x90, 0x8f, 0xd3, 0xd9, 0x66,
		0x54, 0x66, 0x65, 0xfa, 0x59, 0x08, 0x2b, 0x73, 0x64, 0x02,
		0xb2, 0x74, 0x55, 0x68, 0xb9, 0x00, 0x28, 0xbc, 0x06, 0xe8,
		0x4d, 0x5d, 0x38, 0xcd, 0x4b, 0xe5, 0x2b, 0x03, 0x0d, 0x47,
		0x94, 0xea, 0x5d, 0xea, 0x52, 0x13, 0x6e, 0xc8, 0x1b, 0x0f,
		0x73, 0xf8, 0xad, 0x0f, 0xae, 0xc5,
	},
	sharedKey: []byte{
		0xc8, 0xe1, 0xde, 0x8e, 0x83, 0xce, 0x47, 0x7c, 0x56, 0x32,
		0x80, 0xc6, 0x2a, 0xed, 0xf7, 0x5e, 0x48, 0xbb, 0xdb, 0x69,
		0x4b, 0xca, 0xef, 0xe0, 0x06, 0x03, 0x1f, 0x65, 0x3f, 0xfb,
		0x1e, 0xac, 0xf3, 0x4d, 0x0b, 0xa2, 0x80, 0xd5, 0x26, 0x34,
		0x8c, 0x95, 0xc9, 0xf7, 0x50, 0x3f, 0x50, 0x9e, 0x5d, 0x76,
		0x1d, 0x04, 0xfd, 0x84, 0xde, 0x9f, 0xb0, 0x46, 0xdf, 0x41,
		0x34, 0x9e, 0xec, 0x9e, 0x46, 0x76, 0x84, 0xf1, 0xa1, 0x35,
		0x32, 0x2c, 0x68, 0xe7, 0xfa, 0xce, 0x12, 0xda, 0xe4, 0x20,
		0xb7, 0x96, 0x30, 0xe8, 0x83, 0xbd, 0xa5, 0xb7, 0xa7, 0x68,
		0x8c, 0xff, 0xfd, 0xbc, 0xbf, 0xa3, 0x82, 0xd1, 0x28, 0xea,
		0x75, 0x95, 0xf7, 0xa1, 0x87, 0x22, 0x34, 0x4b, 0x2f, 0x9f,
		0x9a, 0xb7, 0xab, 0x7d, 0xec, 0x6c, 0x3c, 0x14, 0x15, 0x0f,
		0xb5, 0xcc, 0x25, 0xc9, 0xc9, 0xca, 0x52, 0x5e, 0x65, 0xe2,
		0xf9, 0xc5, 0xf8, 0x4b, 0x9e, 0x66, 0xb1, 0xba, 0x9e, 0xd7,
		0xd0, 0x01, 0x03, 0x8a, 0x36, 0xea, 0xe3, 0x31, 0xe6, 0x01,
		0x71, 0xf7, 0xba, 0xaf, 0xe9, 0x99, 0xd4, 0x91, 0xf6, 0x7e,
		0x62, 0xa4, 0x47, 0x87, 0xf6, 0x0c, 0x4c, 0x28, 0x55, 0x84,
		0xfa, 0x82, 0xa7, 0xbf, 0x4b, 0xef, 0xd7, 0x80, 0xeb, 0x30,
		0x65, 0xe9, 0x10, 0x74, 0xea, 0xe9, 0x43, 0x4d, 0x26, 0x2f,
		0x32, 0x0a, 0x46, 0x29, 0x7b, 0x4a, 0x76, 0x16, 0xfc, 0xae,
		0xc0, 0x41, 0xb4, 0xd7, 0x01, 0x68, 0xf8, 0x73, 0xe3, 0x25,
		0x0d, 0x84, 0xce, 0xda, 0xe7, 0xfc, 0x4f, 0x0a, 0xfb, 0x87,
		0x34, 0x2e, 0xdb, 0x64, 0xf1, 0x1b, 0x1f, 0x75, 0x04, 0xdc,
		0xda, 0xa3, 0xe6, 0xb3, 0x68, 0x09, 0xb2, 0x49, 0x22, 0x63,
		0x21, 0xc7, 0x03, 0xd1, 0x8e, 0xbd, 0x6f, 0xc4, 0xf4, 0x58,
		0xca, 0xde, 0x55, 0xe7, 0x7e, 0x08,
	},
}

func TestGenerateKey(t *testing.T) {
	publicKey1, privateKey1, err := GenerateKeyPair(rand.Reader)
	if err != nil {
		t.Fatalf("generate key pair 1: %s", err)
	}
	publicKey2, privateKey2, err := GenerateKeyPair(rand.Reader)
	if err != nil {
		t.Fatalf("generate key pair 2: %s", err)
	}
	if bytes.Equal(privateKey1, privateKey2) {
		t.Fatalf("two private keys are equal!")
	}
	if bytes.Equal(publicKey1, publicKey2) {
		t.Fatalf("two public keys are equal!")
	}
	sharedKey1, err := SharedKey(rand.Reader, publicKey1, privateKey2)
	if err != nil {
		t.Fatalf("compute shared key 1: %s", err)
	}
	sharedKey2, err := SharedKey(rand.Reader, publicKey2, privateKey1)
	if err != nil {
		t.Fatalf("compute shared key 2: %s", err)
	}
	if !bytes.Equal(sharedKey1, sharedKey2) {
		t.Fatalf("two shared keys are not equal!")
	}
}

func TestGeneratePublicKey(t *testing.T) {
	publicKey, err := GeneratePublicKey(rand.Reader, golden.privateKey1)
	if err != nil {
		t.Fatalf("generating public key: %s", err)
	}
	if !bytes.Equal(publicKey, golden.publicKey1) {
		t.Fatalf("generated wrong public key. Expected: %x, got %x", golden.publicKey1, publicKey)
	}
}

func TestSharedKey(t *testing.T) {
	sharedKey1, err := SharedKey(rand.Reader, golden.publicKey1, golden.privateKey2)
	if err != nil {
		t.Fatalf("compute shared key 1: %s", err)
	}
	sharedKey2, err := SharedKey(rand.Reader, golden.publicKey2, golden.privateKey1)
	if err != nil {
		t.Fatalf("compute shared key 2: %s", err)
	}
	if !bytes.Equal(sharedKey1, golden.sharedKey) {
		t.Fatalf(`1: expecting "%x", got "%x"`, golden.sharedKey, sharedKey1)
	}
	if !bytes.Equal(sharedKey2, golden.sharedKey) {
		t.Fatalf(`2: expecting "%x", got "%x"`, golden.sharedKey, sharedKey2)
	}
}

func BenchmarkCompute(b *testing.B) {
	for i := 0; i < b.N; i++ {
		SharedKey(rand.Reader, golden.publicKey1, golden.privateKey1)
	}
}
